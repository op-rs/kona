SOURCE := source_directory()
CURRENT_DIR := `pwd`
DEFAULT_DEVNET_PATH := source_directory() + "/devnets/simple-kona.yaml"
DEFAULT_OP_PACKAGE_PATH := "github.com/ethpandaops/optimism-package@998796c0f3bb478d63d729e65f0b76e24112e00d"

build-devnet BINARY:
    #!/usr/bin/env bash
    if [ {{BINARY}} != "node" ] && [ {{BINARY}} != "supervisor" ]; then
        echo "Invalid binary specified. Must be either 'node' or 'supervisor'."
        exit 1
    fi

    export BUILD_PROFILE="release"
    cd {{SOURCE}}/../docker/apps && just build-local "kona-{{BINARY}}" "kona-{{BINARY}}:local"

# Spins up kurtosis with the `kona-node` docker image
# The CUSTOM_DEVNET_PATH variable can be used to specify a custom devnet path.
# If not specified, the default devnet path will be used.
# The ENCLAVE variable can be used to specify a custom enclave name to use for kurtosis.
devnet DEVNET CUSTOM_DEVNET_PATH="":
  #!/bin/bash
  export DEVNET="--enclave {{DEVNET}}"

  export DEVNET_PATH="{{CUSTOM_DEVNET_PATH}}"
  if [ -z "{{CUSTOM_DEVNET_PATH}}" ]; then
    export DEVNET_PATH="{{SOURCE}}/devnets/{{DEVNET}}.yaml"
  fi

  export OP_PACKAGE_PATH="{{DEFAULT_OP_PACKAGE_PATH}}"

  # Run the kurtosis test
  kurtosis run $OP_PACKAGE_PATH --args-file $DEVNET_PATH $DEVNET

  # Fix Traefik Routes
  cd {{SOURCE}} && go run cmd/main.go

# Winds down kurtosis, cleaning up the network
cleanup-kurtosis:
  kurtosis clean -a

test-e2e-sysgo BINARY GO_PKG_NAME="" FILTER="" : unzip-contract-artifacts
    #!/bin/bash
    if [ -z "{{GO_PKG_NAME}}" ]; then
        export GO_PKG_NAME="..."
    else
        export GO_PKG_NAME="{{GO_PKG_NAME}}"
    fi

    if ! [ -z "{{FILTER}}" ]; then
        export FILTER="-run {{FILTER}}"
    fi

    export OP_DEPLOYER_ARTIFACTS="{{SOURCE}}/artifacts"
    export DISABLE_OP_E2E_LEGACY=true
    
    if [ "{{BINARY}}" = "node" ]; then
        export KONA_NODE_EXEC_PATH="{{SOURCE}}/../target/debug/kona-node"
        export DEVSTACK_ORCHESTRATOR=sysgo
        cd {{SOURCE}}/.. && cargo build --bin kona-node
    elif [ "{{BINARY}}" = "supervisor" ]; then
        export DEVSTACK_SUPERVISOR_KIND=kona
        export KONA_SUPERVISOR_EXEC_PATH="{{SOURCE}}/../target/release/kona-supervisor"
        export DEVSTACK_ORCHESTRATOR=sysgo
        cd {{SOURCE}}/.. && just build-supervisor
    else
        echo "Invalid BINARY specified. Must be either 'node' or 'supervisor'."
        exit 1
    fi

    # Run the test with count=1 to avoid caching the test results.
    cd {{SOURCE}} && go test -count=1 -timeout 40m -v ./$GO_PKG_NAME $FILTER

test-e2e-kurtosis DEVNET GO_PKG_NAME="" FILTER="" DEVNET_CUSTOM_PATH="" :
    #!/bin/bash
    if [ -z "{{GO_PKG_NAME}}" ]; then
        export GO_PKG_NAME="..."
    else
        export GO_PKG_NAME="{{GO_PKG_NAME}}"
    fi

    if ! [ -z "{{FILTER}}" ]; then
        export FILTER="-run {{FILTER}}"
    fi

    export DEVNET_CUSTOM_PATH="{{DEVNET_CUSTOM_PATH}}"
    if [ -z "{{DEVNET_CUSTOM_PATH}}" ]; then
        export DEVNET_CUSTOM_PATH="{{SOURCE}}/devnets/{{DEVNET}}.yaml"
    fi

    export OP_DEPLOYER_ARTIFACTS="{{SOURCE}}/artifacts"
    export DEVNET_ENV_URL="ktnative://{{DEVNET}}$DEVNET_CUSTOM_PATH"
    export DISABLE_OP_E2E_LEGACY=true
    export DEVSTACK_ORCHESTRATOR=sysext

    # Run the test with count=1 to avoid caching the test results.
    cd {{SOURCE}} && go test -count=1 -timeout 40m -v ./$GO_PKG_NAME $FILTER 

long-running-test DEVNET FILTER DEVNET_CUSTOM_PATH="" OUTPUT_LOGS_DIR="":
    #!/bin/bash
    if ! [ -z "{{FILTER}}" ]; then
        export FILTER="-run {{FILTER}}"
    fi
    
    export OP_TESTLOG_FILE_LOGGER_OUTDIR="{{OUTPUT_LOGS_DIR}}"
    if [ -z "{{OUTPUT_LOGS_DIR}}" ]; then
        export OP_TESTLOG_FILE_LOGGER_OUTDIR="{{CURRENT_DIR}}/kona-test-logs"
    fi

    mkdir -p $OP_TESTLOG_FILE_LOGGER_OUTDIR

    export DEVNET_CUSTOM_PATH="{{DEVNET_CUSTOM_PATH}}"
    if [ -z "{{DEVNET_CUSTOM_PATH}}" ]; then
        export DEVNET_CUSTOM_PATH="{{SOURCE}}/devnets/{{DEVNET}}.yaml"
    fi

    export OP_DEPLOYER_ARTIFACTS="{{SOURCE}}/artifacts"
    export DEVNET_ENV_URL="ktnative://{{DEVNET}}$DEVNET_CUSTOM_PATH"
    export DISABLE_OP_E2E_LEGACY=true
    export DEVSTACK_ORCHESTRATOR=sysext

    # Run the test with count=1 to avoid caching the test results.
    cd {{SOURCE}} && go test -count=1 -timeout 0 -v ./node/long-running $FILTER 

build-deploy-devnet BINARY DEVNET CUSTOM_DEVNET_PATH="": (build-devnet BINARY) (devnet DEVNET CUSTOM_DEVNET_PATH)
  
deploy-devnet-and-test-e2e DEVNET GO_PKG_NAME CUSTOM_DEVNET_PATH="": (devnet DEVNET CUSTOM_DEVNET_PATH) (test-e2e-kurtosis DEVNET GO_PKG_NAME)

build-devnet-and-test-e2e BINARY DEVNET GO_PKG_NAME CUSTOM_DEVNET_PATH="": (build-devnet BINARY) (deploy-devnet-and-test-e2e DEVNET GO_PKG_NAME CUSTOM_DEVNET_PATH)

# Updates the devnet with the latest local changes. This is useful to
# rapidly iterate on the devnet without having to redeploy the whole kurtosis network.
update-node-devnet DEVNET OP_PACKAGE_PATH="": (build-devnet "node")
    #!/bin/bash

    # Ensure there is a kurtosis enclave running with the name {{DEVNET}}
    ENCLAVE_EXISTS=$(kurtosis enclave ls | grep {{DEVNET}} || true)
    if [ -z "$ENCLAVE_EXISTS" ]; then
        echo "No kurtosis enclave found with name {{DEVNET}}"
        exit 1
    fi

    # Get all the services that contain the words "cl" and "kona"
    SERVICES=$(kurtosis enclave inspect {{DEVNET}} | grep "cl" | grep "kona" | awk '{print $2}')

    for service in $SERVICES; do
        kurtosis service update {{DEVNET}} $service --image kona-node:local
    done

unzip-contract-artifacts:
    #!/bin/bash
    mkdir -p {{SOURCE}}/artifacts/src
    tar -xzf {{SOURCE}}/artifacts/compressed/artifacts.tgz -C {{SOURCE}}/artifacts/src
