SOURCE := source_directory()
CURRENT_DIR := `pwd`
DEFAULT_DEVNET_PATH := source_directory() + "/devnets/simple-kona.yaml"
DEFAULT_OP_PACKAGE_PATH := "github.com/ethpandaops/optimism-package@998796c0f3bb478d63d729e65f0b76e24112e00d"

build-devnet BINARY:
    #!/usr/bin/env bash
    if [ {{BINARY}} != "node" ] && [ {{BINARY}} != "supervisor" ]; then
        echo "Invalid binary specified. Must be either 'node' or 'supervisor'."
        exit 1
    fi

    export BUILD_PROFILE="release"
    cd {{SOURCE}}/../docker/apps && just build-local "kona-{{BINARY}}" "kona-{{BINARY}}:local"

# Spins up kurtosis with the `kona-node` docker image
# The CUSTOM_DEVNET_PATH variable can be used to specify a custom devnet path.
# If not specified, the default devnet path will be used.
# The ENCLAVE variable can be used to specify a custom enclave name to use for kurtosis.
devnet DEVNET CUSTOM_DEVNET_PATH="":
  #!/bin/bash
  export DEVNET="--enclave {{DEVNET}}"

  export DEVNET_PATH="{{CUSTOM_DEVNET_PATH}}"
  if [ -z "{{CUSTOM_DEVNET_PATH}}" ]; then
    export DEVNET_PATH="{{SOURCE}}/devnets/{{DEVNET}}.yaml"
  fi

  export OP_PACKAGE_PATH="{{DEFAULT_OP_PACKAGE_PATH}}"

  # Run the kurtosis test
  kurtosis run $OP_PACKAGE_PATH --args-file $DEVNET_PATH $DEVNET

  # Fix Traefik Routes
  cd {{SOURCE}} && go run cmd/main.go

# Winds down kurtosis, cleaning up the network
cleanup-kurtosis:
  kurtosis clean -a

build-reth:
  #!/bin/bash
  cd {{SOURCE}}/reth/crates/optimism/bin && cargo build --bin op-reth

build-kona:
  #!/bin/bash
  cd {{SOURCE}}/.. && cargo build --bin kona-node

# Run acceptance tests for the rust stack. By default runs the acceptance tests for kona-node with op-reth.
# Uses the jovian gate by default.
acceptance-tests CL_TYPE="kona" EL_TYPE="op-reth" GATE="jovian":
  #!/bin/bash
  if [ "{{CL_TYPE}}" = "kona" ] ; then
    echo "Running acceptance tests for kona-node"
    export KONA_NODE_EXEC_PATH="{{SOURCE}}/../target/debug/kona-node"
    echo "Building kona-node..."
    just build-kona
  else
    echo "Running acceptance tests for op-node"
  fi

  if [ "{{EL_TYPE}}" = "op-reth" ] ; then
    echo "Running acceptance tests for op-reth"
    export OP_RETH_EXEC_PATH="{{SOURCE}}/reth/target/debug/op-reth"
    echo "Building op-reth..."
    just build-reth
  else
    echo "Running acceptance tests for op-geth"
  fi

  export DEVSTACK_L2CL_KIND="{{CL_TYPE}}"
  export DEVSTACK_L2EL_KIND="{{EL_TYPE}}"
  export LOG_LEVEL="debug"
  cd {{SOURCE}}/optimism/op-acceptance-tests && just acceptance-test "" "{{GATE}}"

test-e2e-sysgo BINARY GO_PKG_NAME="" DEVNET="simple-kona" FILTER="" : unzip-contract-artifacts
    #!/bin/bash
    if [ -z "{{GO_PKG_NAME}}" ]; then
        export GO_PKG_NAME="..."
    else
        export GO_PKG_NAME="{{GO_PKG_NAME}}"
    fi

    if ! [ -z "{{FILTER}}" ]; then
        export FILTER="-run {{FILTER}}"
    fi

    export OP_DEPLOYER_ARTIFACTS="{{SOURCE}}/artifacts"
    export DISABLE_OP_E2E_LEGACY=true

    if [ "{{DEVNET}}" = "simple-kona" ]; then
        export KONA_SEQUENCER_WITH_RETH=0
        export KONA_VALIDATOR_WITH_RETH=1
        export KONA_SEQUENCER_WITH_GETH=0
        export KONA_VALIDATOR_WITH_GETH=0

        export OP_SEQUENCER_WITH_RETH=1
        export OP_VALIDATOR_WITH_RETH=1
        export OP_SEQUENCER_WITH_GETH=0
        export OP_VALIDATOR_WITH_GETH=0
    elif [ "{{DEVNET}}" = "simple-kona-geth" ]; then
        export KONA_SEQUENCER_WITH_RETH=0
        export KONA_VALIDATOR_WITH_RETH=0
        export KONA_SEQUENCER_WITH_GETH=0
        export KONA_VALIDATOR_WITH_GETH=1

        export OP_SEQUENCER_WITH_RETH=0
        export OP_VALIDATOR_WITH_RETH=0
        export OP_SEQUENCER_WITH_GETH=1
        export OP_VALIDATOR_WITH_GETH=1
    elif [ "{{DEVNET}}" = "simple-kona-sequencer" ]; then
        export KONA_SEQUENCER_WITH_RETH=1
        export KONA_VALIDATOR_WITH_RETH=1
        export KONA_SEQUENCER_WITH_GETH=0
        export KONA_VALIDATOR_WITH_GETH=1

        export OP_SEQUENCER_WITH_RETH=0
        export OP_VALIDATOR_WITH_RETH=0
        export OP_SEQUENCER_WITH_GETH=0
        export OP_VALIDATOR_WITH_GETH=0
    elif [ "{{DEVNET}}" = "large-kona-sequencer" ]; then
        export KONA_SEQUENCER_WITH_RETH=1
        export KONA_VALIDATOR_WITH_RETH=4
        export KONA_SEQUENCER_WITH_GETH=0
        export KONA_VALIDATOR_WITH_GETH=4

        export OP_SEQUENCER_WITH_RETH=0
        export OP_VALIDATOR_WITH_RETH=0
        export OP_SEQUENCER_WITH_GETH=0
        export OP_VALIDATOR_WITH_GETH=0
    fi
    
    if [ "{{BINARY}}" = "node" ]; then
        export KONA_NODE_EXEC_PATH="{{SOURCE}}/../target/debug/kona-node"
        export OP_RETH_EXEC_PATH="{{SOURCE}}/reth/target/debug/op-reth"
        export DEVSTACK_ORCHESTRATOR=sysgo
        echo "Building kona-node..."
        just build-kona
        echo "Building op-reth..."
        just build-reth
    elif [ "{{BINARY}}" = "supervisor" ]; then
        export DEVSTACK_SUPERVISOR_KIND=kona
        export KONA_SUPERVISOR_EXEC_PATH="{{SOURCE}}/../target/release/kona-supervisor"
        export DEVSTACK_ORCHESTRATOR=sysgo
        cd {{SOURCE}}/.. && just build-supervisor
    else
        echo "Invalid BINARY specified. Must be either 'node' or 'supervisor'."
        exit 1
    fi

    # Run the test with count=1 to avoid caching the test results.
    cd {{SOURCE}} && go test -count=1 -timeout 40m -v ./$GO_PKG_NAME $FILTER

test-e2e-kurtosis DEVNET GO_PKG_NAME="" FILTER="" DEVNET_CUSTOM_PATH="" :
    #!/bin/bash
    if [ -z "{{GO_PKG_NAME}}" ]; then
        export GO_PKG_NAME="..."
    else
        export GO_PKG_NAME="{{GO_PKG_NAME}}"
    fi

    if ! [ -z "{{FILTER}}" ]; then
        export FILTER="-run {{FILTER}}"
    fi

    export DEVNET_CUSTOM_PATH="{{DEVNET_CUSTOM_PATH}}"
    if [ -z "{{DEVNET_CUSTOM_PATH}}" ]; then
        export DEVNET_CUSTOM_PATH="{{SOURCE}}/devnets/{{DEVNET}}.yaml"
    fi

    export OP_DEPLOYER_ARTIFACTS="{{SOURCE}}/artifacts"
    export DEVNET_ENV_URL="ktnative://{{DEVNET}}$DEVNET_CUSTOM_PATH"
    export DISABLE_OP_E2E_LEGACY=true
    export DEVSTACK_ORCHESTRATOR=sysext

    # Run the test with count=1 to avoid caching the test results.
    cd {{SOURCE}} && go test -count=1 -timeout 40m -v ./$GO_PKG_NAME $FILTER 

long-running-test FILTER="" OUTPUT_LOGS_DIR="":
    #!/bin/bash
    if ! [ -z "{{FILTER}}" ]; then
        export FILTER="-run {{FILTER}}"
    fi

    export KONA_SEQUENCER_WITH_RETH=1
    export KONA_VALIDATOR_WITH_RETH=4
    export KONA_SEQUENCER_WITH_GETH=0
    export KONA_VALIDATOR_WITH_GETH=4

    export OP_SEQUENCER_WITH_RETH=0
    export OP_VALIDATOR_WITH_RETH=0
    export OP_SEQUENCER_WITH_GETH=0
    export OP_VALIDATOR_WITH_GETH=0

    export KONA_NODE_EXEC_PATH="{{SOURCE}}/../target/debug/kona-node"
    export OP_RETH_EXEC_PATH="{{SOURCE}}/reth/target/debug/op-reth"
    export DEVSTACK_ORCHESTRATOR=sysgo
    echo "Building kona-node..."
    just build-kona
    echo "Building op-reth..."
    just build-reth
    
    export OP_TESTLOG_FILE_LOGGER_OUTDIR="{{OUTPUT_LOGS_DIR}}"
    if [ -z "{{OUTPUT_LOGS_DIR}}" ]; then
        export OP_TESTLOG_FILE_LOGGER_OUTDIR="{{CURRENT_DIR}}/kona-test-logs"
    fi

    mkdir -p $OP_TESTLOG_FILE_LOGGER_OUTDIR

    export OP_DEPLOYER_ARTIFACTS="{{SOURCE}}/artifacts"
    export DISABLE_OP_E2E_LEGACY=true

    ## Serve prometheus metrics
    export KONA_METRICS_ENABLED=true

    export SYSGO_DOCKER_EXEC_PATH="/usr/local/bin/docker"
    export SYSGO_GRAFANA_PROVISIONING_DIR="{{SOURCE}}/.temp/grafana/"
    export SYSGO_GRAFANA_DATA_DIR="{{SOURCE}}/.temp/grafana-data/"

    # Run the test with count=1 to avoid caching the test results.
    cd {{SOURCE}} && go test -count=1 -timeout 0 -v ./node/long-running $FILTER 

# Run action tests for the single-chain client program on the native target
action-tests-single test_name='Test_ProgramAction' *args='':
  #!/bin/bash
  echo "Building contract artifacts for the optimism"
  just unzip-contract-artifacts {{SOURCE}}/optimism/packages/contracts-bedrock/forge-artifacts

  echo "Building host program for the native target"
  just build-native --bin kona-host
  export KONA_HOST_PATH="{{SOURCE}}/../target/debug/kona-host"

  # GitHub actions patch - do not print logs.
  # https://github.com/gotestyourself/gotestsum/blob/b4b13345fee56744d80016a20b760d3599c13504/testjson/format.go#L442-L444
  echo "Running action tests for the client program on the native target"

  cd {{SOURCE}}/optimism/op-e2e/actions/proofs && GITHUB_ACTIONS=false gotestsum --format=testname -- -timeout 60m -run "{{test_name}}" {{args}} -count=1 ./...

# Run action tests for the interop client program on the native target
action-tests-interop test_name='TestInteropFaultProofs' *args='':
  #!/bin/bash
  echo "Building contract artifacts for the optimism"
  just unzip-contract-artifacts {{SOURCE}}/optimism/packages/contracts-bedrock/forge-artifacts

  echo "Building host program for the native target"
  just build-native --bin kona-host
  export KONA_HOST_PATH="{{justfile_directory()}}/target/debug/kona-host"

  # GitHub actions patch - do not print logs.
  # https://github.com/gotestyourself/gotestsum/blob/b4b13345fee56744d80016a20b760d3599c13504/testjson/format.go#L442-L444
  echo "Running action tests for the client program on the native target"

  cd {{SOURCE}}/optimism/op-e2e/actions/interop && GITHUB_ACTIONS=false gotestsum --format=testname -- -run "{{test_name}}" {{args}} -count=1 ./...

build-deploy-devnet BINARY DEVNET CUSTOM_DEVNET_PATH="": (build-devnet BINARY) (devnet DEVNET CUSTOM_DEVNET_PATH)
  
deploy-devnet-and-test-e2e DEVNET GO_PKG_NAME CUSTOM_DEVNET_PATH="": (devnet DEVNET CUSTOM_DEVNET_PATH) (test-e2e-kurtosis DEVNET GO_PKG_NAME)

build-devnet-and-test-e2e BINARY DEVNET GO_PKG_NAME CUSTOM_DEVNET_PATH="": (build-devnet BINARY) (deploy-devnet-and-test-e2e DEVNET GO_PKG_NAME CUSTOM_DEVNET_PATH)

# Updates the devnet with the latest local changes. This is useful to
# rapidly iterate on the devnet without having to redeploy the whole kurtosis network.
update-node-devnet DEVNET OP_PACKAGE_PATH="": (build-devnet "node")
    #!/bin/bash

    # Ensure there is a kurtosis enclave running with the name {{DEVNET}}
    ENCLAVE_EXISTS=$(kurtosis enclave ls | grep {{DEVNET}} || true)
    if [ -z "$ENCLAVE_EXISTS" ]; then
        echo "No kurtosis enclave found with name {{DEVNET}}"
        exit 1
    fi

    # Get all the services that contain the words "cl" and "kona"
    SERVICES=$(kurtosis enclave inspect {{DEVNET}} | grep "cl" | grep "kona" | awk '{print $2}')

    for service in $SERVICES; do
        kurtosis service update {{DEVNET}} $service --image kona-node:local
    done

unzip-contract-artifacts DEST_DIR="":
    #!/bin/bash

    export DEST_DIR="{{DEST_DIR}}"
    if [ -z "{{DEST_DIR}}" ]; then
        export DEST_DIR="{{SOURCE}}/artifacts/src"
    fi

    mkdir -p $DEST_DIR

    tar -xzf {{SOURCE}}/artifacts/compressed/artifacts.tgz -C $DEST_DIR


update-packages: 
    #!/bin/bash
    cd {{SOURCE}}/optimism/op-deployer && just build-contracts copy-contract-artifacts
    cp {{SOURCE}}/optimism/op-deployer/pkg/deployer/artifacts/forge-artifacts/artifacts.tgz {{SOURCE}}/artifacts/compressed/artifacts.tgz

# Updates the pinned version of the optimism
update-optimism:
  #!/bin/bash
  git submodule update --remote --force

